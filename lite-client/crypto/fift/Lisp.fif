// create Lisp-style lists using words "(" and ")"
variable ')
{ ") without (" abort } ') ! 
{ ') @ execute } : )
{ null
  { -rot 2dup eq? not }
  { swap rot cons } while 2drop
} : list-until-marker
{ anon dup ') @ 2 { ') ! list-until-marker } does ') ! } : (
// test of Lisp-style lists
// ( 42 ( `+ 9 ( `* 3 4 ) ) "test" ) .l cr
// ( `eq? ( `* 3 4 ) 3 4 * ) .l cr
// `alpha ( `beta `gamma `delta ) cons .l cr
// { ( `eq? ( `* 3 5 pick ) 3 4 roll * ) } : 3*sample
// 17 3*sample .l cr

// similar syntax _( x1 .. xn ) for tuples
{ 2 { 1+ 2dup pick eq? } until 3 - nip } : count-to-marker
{ count-to-marker tuple nip } : tuple-until-marker
{ anon dup ') @ 2 { ') ! tuple-until-marker } does ') ! } : _(
// test of tuples
// _( _( 2 "two" ) _( 3 "three" ) _( 4 "four" ) ) .dump cr

// some list utilities
{ null swap { dup null? not } { uncons swap rot cons swap } while drop } : list-reverse
// ( 2 3 9 ) list-reverse .l cr
